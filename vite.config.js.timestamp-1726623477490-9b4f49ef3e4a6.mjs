// vite.config.js
import { defineConfig, loadEnv } from "file:///D:/VisualStudioWorkSpace/ZRAdmin-vue/node_modules/vite/dist/node/index.js";
import path2 from "path";

// vite/plugins/index.js
import vue from "file:///D:/VisualStudioWorkSpace/ZRAdmin-vue/node_modules/@vitejs/plugin-vue/dist/index.mjs";

// vite/plugins/auto-import.js
import autoImport from "file:///D:/VisualStudioWorkSpace/ZRAdmin-vue/node_modules/unplugin-auto-import/dist/vite.js";
function createAutoImport() {
  return autoImport({
    imports: [
      "vue",
      "vue-router",
      "pinia"
    ],
    dts: "src/auto-import.d.ts"
    // 生成 `auto-import.d.ts` 全局声明
  });
}

// vite/plugins/svg-icon.js
import { createSvgIconsPlugin } from "file:///D:/VisualStudioWorkSpace/ZRAdmin-vue/node_modules/vite-plugin-svg-icons/dist/index.mjs";
import path from "path";
function createSvgIcon(isBuild) {
  return createSvgIconsPlugin({
    iconDirs: [path.resolve(process.cwd(), "src/assets/icons/svg")],
    symbolId: "icon-[dir]-[name]",
    svgoOptions: isBuild
  });
}

// vite/plugins/compression.js
import compression from "file:///D:/VisualStudioWorkSpace/ZRAdmin-vue/node_modules/vite-plugin-compression/dist/index.mjs";
function createCompression(env) {
  const { VITE_BUILD_COMPRESS } = env;
  const plugin = [];
  if (VITE_BUILD_COMPRESS) {
    const compressList = VITE_BUILD_COMPRESS.split(",");
    if (compressList.includes("gzip")) {
      plugin.push(
        compression({
          algorithm: "gzip",
          threshold: 10240,
          //>=10kb的文件进行压缩
          verbose: false,
          deleteOriginFile: false
        })
      );
    }
    if (compressList.includes("brotli")) {
      plugin.push(
        compression({
          ext: ".br",
          algorithm: "brotliCompress",
          deleteOriginFile: false
        })
      );
    }
  }
  return plugin;
}

// vite/plugins/setup-extend.js
import setupExtend from "file:///D:/VisualStudioWorkSpace/ZRAdmin-vue/node_modules/vite-plugin-vue-setup-extend/dist/index.mjs";
function createSetupExtend() {
  return setupExtend();
}

// vite/plugins/index.js
import { lazyImport, VxeResolver } from "file:///D:/VisualStudioWorkSpace/ZRAdmin-vue/node_modules/vite-plugin-lazy-import/dist/index.cjs";
function createVitePlugins(viteEnv, isBuild = false) {
  const vitePlugins = [vue()];
  vitePlugins.push(createAutoImport());
  vitePlugins.push(createSetupExtend());
  vitePlugins.push(createSvgIcon(isBuild));
  isBuild && vitePlugins.push(...createCompression(viteEnv));
  vitePlugins.push(
    lazyImport({
      resolvers: [
        VxeResolver({
          libraryName: "vxe-table"
        }),
        VxeResolver({
          libraryName: "vxe-pc-ui"
        })
      ]
    })
  );
  return vitePlugins;
}

// vite.config.js
var __vite_injected_original_dirname = "D:\\VisualStudioWorkSpace\\ZRAdmin-vue";
var vite_config_default = defineConfig(({ mode, command }) => {
  const env = loadEnv(mode, process.cwd());
  const alias = {
    // 设置路径
    "~": path2.resolve(__vite_injected_original_dirname, "./"),
    // 设置别名
    "@": path2.resolve(__vite_injected_original_dirname, "./src")
  };
  if (command === "serve") {
    alias["vue-i18n"] = "vue-i18n/dist/vue-i18n.cjs.js";
  }
  return {
    plugins: createVitePlugins(env, command === "build"),
    resolve: {
      // https://cn.vitejs.dev/config/#resolve-alias
      alias,
      // 导入时想要省略的扩展名列表
      // https://cn.vitejs.dev/config/#resolve-extensions
      extensions: [".mjs", ".js", ".ts", ".jsx", ".tsx", ".json", ".vue"]
    },
    css: {
      devSourcemap: true
      //开发模式时启用
    },
    base: env.VITE_APP_ROUTER_PREFIX,
    // 打包配置
    build: {
      sourcemap: command === "build" ? false : "inline",
      outDir: "dist",
      //指定输出目录
      assetsDir: "assets",
      //指定静态资源存储目录(相对于outDir)
      chunkSizeWarningLimit: 2e3,
      //Adjust the limit to your desired value in KB
      // 将js、css文件分离到单独文件夹
      rollupOptions: {
        output: {
          chunkFileNames: "static/js/[name]-[hash].js",
          entryFileNames: "static/js/[name]-[hash].js",
          assetFileNames: "static/[ext]/[name]-[hash].[ext]"
        }
      }
    },
    // vite 相关配置
    server: {
      port: 8887,
      host: true,
      open: true,
      proxy: {
        // https://cn.vitejs.dev/config/#server-proxy
        "/dev-api": {
          target: env.VITE_APP_API_HOST,
          changeOrigin: true,
          rewrite: (path3) => path3.replace(/^\/dev-api/, "")
        },
        "/msghub": {
          target: env.VITE_APP_API_HOST,
          ws: true,
          rewrite: (path3) => path3.replace(/^\/msgHub/, "")
        }
      }
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
